# Copyright 2019 Adam Gleave
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
version: 2.1

orbs:
  codecov: codecov/codecov@1.0.5

executors:
  my-executor:
    docker:
      - image: humancompatibleai/evaluating_rewards:latest
    working_directory: /evaluating-rewards
    environment:
      # If you change these, also change scripts/code_checks.sh
      SRC_FILES: src/ tests/ setup.py
      TYPECHECK_FILES: src/  # tests often do weird things with types, exclude
      NUM_CPUS: 2  # more CPUs visible but we're throttled to 2, which breaks auto-detect

commands:
  dependencies:
    # You must still manually update the Docker image if any
    # binary (non-Python) dependencies change.
    description: "Check out and update Python dependencies."
    steps:
      - checkout
      # Download and cache dependencies
      # Note you will still need to manually update the Docker image if any
      # binary (non-Python) dependencies change.
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          # MUJOCO_KEY is defined in a CircleCI context
          # Do some sanity checks to make sure key works
          command: |
            pip install -r requirements.txt -r requirements-dev.txt
            pip install pytest-circleci-parallelized
            curl -o /root/.mujoco/mjkey.txt ${MUJOCO_KEY}
            md5sum /root/.mujoco/mjkey.txt
            python -c "import mujoco_py"

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}

jobs:
  debugtestsplit:
    executor: my-executor

    steps:
      - dependencies
      - run:
          name: Full test split
          command: pytest --collect-only --quiet | grep '::' | circleci tests split --split-by=timings --timings-type=testname
      - run:
          name: Partial test split
          command: |
            echo "tests/test_synthetic.py::TestSynthetic::test_identical[Linear-identity-Uniform5D]
            tests/test_synthetic.py::TestSynthetic::test_identical[Linear-identity-PointLine]
            tests/test_synthetic.py::TestSynthetic::test_identical[Linear-identity-PointGrid]
            tests/test_synthetic.py::TestSynthetic::test_identical[Linear-random-Uniform5D]
            tests/test_synthetic.py::TestSynthetic::test_identical[Linear-random-PointLine]
            tests/test_synthetic.py::TestSynthetic::test_identical[Linear-random-PointGrid]" | \
            circleci tests split --split-by=timings --timings-type=tsetname
      - run:
          name: Test reports
          command: cat /tmp/test-reports/junit.xml

  lintandtype:
    executor: my-executor

    steps:
      - dependencies
      - run:
          name: flake8
          command: flake8 ${SRC_FILES}

      - run:
          name: black
          command: black --check ${SRC_FILES}

      - run:
          name: codespell
          command: codespell -I .codespell.skip --skip='*.pyc' ${SRC_FILES}

      - run:
          name: pylint
          command: pylint -j ${NUM_CPUS} ${SRC_FILES}

      - run:
          name: pytype
          command: pytype ${TYPECHECK_FILES}

  unit-test:
    executor: my-executor
    parallelism: 4
    steps:
      - dependencies

      - run:
          name: run tests
          command: |
            pytest --cov=venv/lib/python3.7/site-packages/evaluating_rewards --cov=tests \
                   --junitxml=/tmp/test-reports/junit.xml --no-success-flaky-report \
                   -n ${NUM_CPUS} --circleci-parallelize -vv tests/
            mv .coverage .coverage.eval
            coverage combine  # rewrite paths from virtualenv to src/
      - codecov/upload

      - store_artifacts:
          path: /tmp/test-reports
          destination: test-reports
      - store_test_results:
          path: /tmp/test-reports
          unit-test:

workflows:
  version: 2
  test:
    jobs:
      - debugtestsplit:
          context: MuJoCo
      - lintandtype:
          context: MuJoCo
      - unit-test:
          context: MuJoCo
