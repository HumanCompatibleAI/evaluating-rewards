# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

executors:
  my-executor:
    docker:
      - image: humancompatibleai/evaluating_rewards:latest
    working_directory: /evaluating-rewards
    environment:
      SRC_DIRS: src/ tests/
      TYPECHECK_DIRS: src/  # tests often do weird things with types, exclude

commands:
  dependencies:
    # You must still manually update the Docker image if any
    # binary (non-Python) dependencies change.
    description: "Check out and update Python dependencies."
    steps:
      - checkout
      # Download and cache dependencies
      # Note you will still need to manually update the Docker image if any
      # binary (non-Python) dependencies change.
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          # MUJOCO_KEY is defined in a CircleCI context
          # Do some sanity checks to make sure key works
          command: |
            pip install -r requirements.txt
            pip install pytest-circleci-parallelized
            curl -o /root/.mujoco/mjkey.txt ${MUJOCO_KEY}
            md5sum /root/.mujoco/mjkey.txt
            python -c "import mujoco_py"

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

jobs:
  lintandtype:
    executor: my-executor

    steps:
      - dependencies
      - run:
          name: flake8
          command: flake8 ${SRC_FILES}

      - run:
          name: black
          command: black --diff ${SRC_FILES}

      - run:
          name: pylint
          command: pylint ${SRC_FILES}

      - run:
          name: pytype
          command: pytype ${TYPECHECK_FILES}

  unit-test:
    executor: my-executor
    parallelism: 4
    steps:
      - dependencies
      # TODO: test coverage
      # TODO: test output
      - run:
          name: run tests
          command: pytest -n 2 --circleci-parallelize -vv tests/

      - store_artifacts:
          path: /tmp/test-reports
          destination: test-reports
      - store_test_results:
          path: /tmp/test-reports
          unit-test:

workflows:
  version: 2
  test:
    jobs:
      # TODO: consider adding a dependencies job just to ensure cache hit?
      # probably not worth it as requirements.txt changes very rarely...
      - lintandtype:
          context: MuJoCo
      - unit-test:
          context: MuJoCo
